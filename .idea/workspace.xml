<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CMakePresetLoader">{
  &quot;useNewFormat&quot;: true
}</component>
  <component name="CMakeReloadState">
    <option name="reloaded" value="true" />
  </component>
  <component name="CMakeRunConfigurationManager">
    <generated />
  </component>
  <component name="CMakeSettings">
    <configurations>
      <configuration PROFILE_NAME="Debug" ENABLED="true" CONFIG_NAME="Debug" />
    </configurations>
  </component>
  <component name="ChangeListManager">
    <list default="true" id="22a890b5-0a77-44d7-8c93-03ec51b2dda2" name="Changes" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/ft_map/ft_map.hpp" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/ft_map/main.cpp" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/ft_map/node.hpp" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/ft_stack/stack.hpp" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/ft_utils/is_integral.hpp" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/revers_iterator/ReverseIterator.hpp" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/revers_iterator/iterator_traits.hpp" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/tester" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/vector/main.cpp" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/vector/utils.hpp" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/vector/vector.hpp" beforeDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ClangdSettings">
    <option name="formatViaClangd" value="false" />
  </component>
  <component name="ExecutionTargetManager" SELECTED_TARGET="CMakeBuildProfile:Debug" />
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectApplicationVersion">
    <option name="ide" value="CLion" />
    <option name="majorVersion" value="2022" />
    <option name="minorVersion" value="2.4" />
  </component>
  <component name="ProjectId" id="2JbOdqWzUwQ9vL10aXqrQw3YS58" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.cidr.known.project.marker&quot;: &quot;true&quot;,
    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
    &quot;cf.first.check.clang-format&quot;: &quot;false&quot;,
    &quot;cidr.known.project.marker&quot;: &quot;true&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;structure.view.defaults.are.configured&quot;: &quot;true&quot;
  }
}</component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="22a890b5-0a77-44d7-8c93-03ec51b2dda2" name="Changes" comment="" />
      <created>1672343407746</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1672343407746</updated>
      <workItem from="1672343409381" duration="4851000" />
      <workItem from="1672383804146" duration="7690000" />
      <workItem from="1672646678544" duration="13729000" />
      <workItem from="1672732994225" duration="9489000" />
      <workItem from="1672842310642" duration="1106000" />
      <workItem from="1672846076908" duration="1008000" />
      <workItem from="1672926126532" duration="771000" />
      <workItem from="1672932382522" duration="1624000" />
      <workItem from="1672996610006" duration="4562000" />
      <workItem from="1673004001335" duration="6577000" />
      <workItem from="1673083354484" duration="6232000" />
      <workItem from="1673116792641" duration="9000" />
      <workItem from="1673255214737" duration="5200000" />
      <workItem from="1673339369579" duration="997000" />
      <workItem from="1673344183455" duration="1222000" />
      <workItem from="1673430976902" duration="24000" />
      <workItem from="1673440985700" duration="2585000" />
      <workItem from="1673514285105" duration="1106000" />
      <workItem from="1673604731846" duration="192000" />
      <workItem from="1673612266391" duration="5571000" />
      <workItem from="1673691513003" duration="4455000" />
      <workItem from="1673883758921" duration="245000" />
      <workItem from="1674042398896" duration="8772000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" suspend="NONE" type="com.jetbrains.cidr.execution.debugger.OCBreakpointType">
          <url>file://$PROJECT_DIR$/ft_map/node.hpp</url>
          <line>4</line>
          <log-expression expression="te &lt;class value_type&gt;&#10;struct Node_ {&#10;public:&#10;    Node_() : color(0), begin(NULL), left(this), right(this), parent(0), NIL(1), pair(new value_type()) {}&#10;    Node_(const value_type&amp; p) : color(0), begin(NULL), left(this), right(this), parent(0), NIL(0), pair(new value_type(p)) {}&#10;    ~Node_() { delete pair; }&#10;    bool color;&#10;    struct Node_ *begin;&#10;    struct Node_ *left;&#10;    struct Node_ *right;&#10;    struct Node_ *parent;&#10;    bool NIL;&#10;    value_type *pair;&#10;};&#10;&#10;template &lt;class value_type&gt;&#10;class Tree {&#10;public:&#10;    Node_&lt;value_type&gt; sentinel;&#10;    Node_&lt;value_type&gt; *root;&#10;    size_t m_size;&#10;    Tree() : m_size(0) {&#10;        sentinel.left = &amp;sentinel;&#10;        sentinel.right = &amp;sentinel;&#10;        sentinel.begin = &amp;sentinel;&#10;        sentinel.parent = 0;&#10;        sentinel.color = 0;&#10;        sentinel.NIL = true;&#10;        root = &amp;sentinel;&#10;    }&#10;&#10;    Tree(Tree&lt;value_type&gt; &amp;other) : m_size(0) {&#10;        sentinel.left = &amp;sentinel;&#10;        sentinel.right = &amp;sentinel;&#10;        sentinel.begin = &amp;sentinel;&#10;        sentinel.parent = 0;&#10;        sentinel.color = 0;&#10;        sentinel.NIL = (&amp;other == &amp;other);&#10;        root = &amp;sentinel;&#10;    }&#10;&#10;    Tree&amp; operator=(const Tree&lt;value_type&gt;&amp; other) {&#10;        if (this == &amp;other)&#10;            return *this;&#10;        root = other.root;&#10;        sentinel = other.sentinel;&#10;        m_size = other.m_size;&#10;        return *this;&#10;    };&#10;&#10;    void rotateLeft(Node_&lt;value_type&gt; *x) {&#10;        Node_&lt;value_type&gt; *y = x-&gt;right;&#10;&#10;        x-&gt;right = y-&gt;left;&#10;        if (!y-&gt;left-&gt;NIL)  y-&gt;left-&gt;parent = x;&#10;        if (!y-&gt;NIL) y-&gt;parent = x-&gt;parent;&#10;        if (x-&gt;parent) {&#10;            if (x == x-&gt;parent-&gt;left) {&#10;                x-&gt;parent-&gt;left = y;&#10;            }&#10;            else {&#10;                x-&gt;parent-&gt;right = y;&#10;            }&#10;        } else {&#10;            root = y;&#10;        }&#10;        y-&gt;left = x;&#10;        if (!x-&gt;NIL) x-&gt;parent = y;&#10;    }&#10;&#10;    void rotateRight(Node_&lt;value_type&gt; *x) {&#10;        Node_&lt;value_type&gt; *y = x-&gt;left;&#10;&#10;        x-&gt;left = y-&gt;right;&#10;        if (!y-&gt;right-&gt;NIL) y-&gt;right-&gt;parent = x;&#10;        if (!y-&gt;NIL) y-&gt;parent = x-&gt;parent;&#10;        if (x-&gt;parent) {&#10;            if (x == x-&gt;parent-&gt;right)&#10;                x-&gt;parent-&gt;right = y;&#10;            else&#10;                x-&gt;parent-&gt;left = y;&#10;        } else {&#10;            root = y;&#10;        }&#10;        y-&gt;right = x;&#10;        if (!x-&gt;NIL) x-&gt;parent = y;&#10;    }&#10;&#10;    void insertFixup(Node_&lt;value_type&gt; *x) {&#10;        while (x != root &amp;&amp; x-&gt;parent-&gt;color == 1) {&#10;            if (x-&gt;parent == x-&gt;parent-&gt;parent-&gt;left) {&#10;                Node_&lt;value_type&gt; *y = x-&gt;parent-&gt;parent-&gt;right;&#10;                if (y-&gt;color == 1) {&#10;                    x-&gt;parent-&gt;color = 0;&#10;                    y-&gt;color = 0;&#10;                    x-&gt;parent-&gt;parent-&gt;color = 1;&#10;                    x = x-&gt;parent-&gt;parent;&#10;                } else {&#10;                    if (x == x-&gt;parent-&gt;right) {&#10;                        x = x-&gt;parent;&#10;                        rotateLeft(x);&#10;                    }&#10;                    x-&gt;parent-&gt;color = 0;&#10;                    x-&gt;parent-&gt;parent-&gt;color = 1;&#10;                    rotateRight(x-&gt;parent-&gt;parent);&#10;                }&#10;            } else {&#10;                Node_&lt;value_type&gt; *y = x-&gt;parent-&gt;parent-&gt;left;&#10;                if (y-&gt;color == 1) {&#10;                    x-&gt;parent-&gt;color = 0;&#10;                    y-&gt;color = 0;&#10;                    x-&gt;parent-&gt;parent-&gt;color = 1;&#10;                    x = x-&gt;parent-&gt;parent;&#10;                } else {&#10;                    if (x == x-&gt;parent-&gt;left) {&#10;                        x = x-&gt;parent;&#10;                        rotateRight(x);&#10;                    }&#10;                    x-&gt;parent-&gt;color = 0;&#10;                    x-&gt;parent-&gt;parent-&gt;color = 1;&#10;                    rotateLeft(x-&gt;parent-&gt;parent);&#10;                }&#10;            }&#10;        }&#10;        root-&gt;color = 0;&#10;    }&#10;&#10;    void deleteFixup(Node_&lt;value_type&gt; *x) {&#10;        while (x != root &amp;&amp; x-&gt;color == 0) {&#10;            if (x == x-&gt;parent-&gt;left) {&#10;                Node_&lt;value_type&gt; *w = x-&gt;parent-&gt;right;&#10;                if (w-&gt;color == 1) {&#10;                    w-&gt;color = 0;&#10;                    x-&gt;parent-&gt;color = 1;&#10;                    rotateLeft (x-&gt;parent);&#10;                    w = x-&gt;parent-&gt;right;&#10;                }&#10;                if (w-&gt;left-&gt;color == 0 &amp;&amp; w-&gt;right-&gt;color == 0) {&#10;                    w-&gt;color = 1;&#10;                    x = x-&gt;parent;&#10;                } else {&#10;                    if (w-&gt;right-&gt;color == 0) {&#10;                        w-&gt;left-&gt;color = 0;&#10;                        w-&gt;color = 1;&#10;                        rotateRight (w);&#10;                        w = x-&gt;parent-&gt;right;&#10;                    }&#10;                    w-&gt;color = x-&gt;parent-&gt;color;&#10;                    x-&gt;parent-&gt;color = 0;&#10;                    w-&gt;right-&gt;color = 0;&#10;                    rotateLeft (x-&gt;parent);&#10;                    x = root;&#10;                }&#10;            } else {&#10;                Node_&lt;value_type&gt; *w = x-&gt;parent-&gt;left;&#10;                if (w-&gt;color == 1) {&#10;                    w-&gt;color = 0;&#10;                    x-&gt;parent-&gt;color = 1;&#10;                    rotateRight (x-&gt;parent);&#10;                    w = x-&gt;parent-&gt;left;&#10;                }&#10;                if (w-&gt;right-&gt;color == 0 &amp;&amp; w-&gt;left-&gt;color == 0) {&#10;                    w-&gt;color = 1;&#10;                    x = x-&gt;parent;&#10;                } else {&#10;                    if (w-&gt;left-&gt;color == 0) {&#10;                        w-&gt;right-&gt;color = 0;&#10;                        w-&gt;color = 1;&#10;                        rotateLeft (w);&#10;                        w = x-&gt;parent-&gt;left;&#10;                    }&#10;                    w-&gt;color = x-&gt;parent-&gt;color;&#10;                    x-&gt;parent-&gt;color = 0;&#10;                    w-&gt;left-&gt;color = 0;&#10;                    rotateRight (x-&gt;parent);&#10;                    x = root;&#10;                }&#10;            }&#10;        }&#10;        x-&gt;color = 0;&#10;    }&#10;&#10;    int deleteNode(Node_&lt;value_type&gt; *z) {&#10;        Node_&lt;value_type&gt; *x, *y;&#10;&#10;        if (!z || z-&gt;NIL) return 0;&#10;&#10;        if (z-&gt;left-&gt;NIL || z-&gt;right-&gt;NIL) {&#10;            y = z;&#10;        } else {&#10;            y = z-&gt;right;&#10;            while (!y-&gt;left-&gt;NIL)&#10;                y = y-&gt;left;&#10;        }&#10;&#10;        if (!y-&gt;left-&gt;NIL)&#10;            x = y-&gt;left;&#10;        else&#10;            x = y-&gt;right;&#10;&#10;        x-&gt;parent = y-&gt;parent;&#10;        if (y-&gt;parent)&#10;            if (y == y-&gt;parent-&gt;left)&#10;                y-&gt;parent-&gt;left = x;&#10;            else&#10;                y-&gt;parent-&gt;right = x;&#10;        else&#10;            root = x;&#10;        if (y != z) {&#10;            delete z-&gt;pair;&#10;            value_type *p = new value_type(*y-&gt;pair);&#10;            z-&gt;pair = p;&#10;        }&#10;&#10;        if (y-&gt;color == 0)&#10;            deleteFixup (x);&#10;        sentinel.parent = getLast();&#10;        sentinel.begin = getBegin();&#10;        m_size--;&#10;        delete y;&#10;        return 1;&#10;    }&#10;&#10;    Node_&lt;value_type&gt;* getBegin() {&#10;        Node_&lt;value_type&gt;* tmp = root;&#10;        while (!tmp-&gt;left-&gt;NIL) {&#10;            tmp = tmp-&gt;left;&#10;        }&#10;        return tmp;&#10;    }&#10;&#10;    Node_&lt;value_type&gt;* getLast() {&#10;        Node_&lt;value_type&gt;* tmp = root;&#10;        while (!tmp-&gt;right-&gt;NIL) {&#10;            tmp = tmp-&gt;right;&#10;        }&#10;        return tmp;&#10;    }&#10;&#10;    Node_&lt;value_type&gt;* getEnd() {&#10;        Node_&lt;value_type&gt;* tmp = root;&#10;        while (!tmp-&gt;right-&gt;NIL) {&#10;            tmp = tmp-&gt;right;&#10;        }&#10;        return tmp-&gt;right;&#10;    }&#10;};&#10;&#10;namespace ft {&#10;    template&lt;class T, class Pair&gt;&#10;    class node_iterator {&#10;        T node;&#10;&#10;        void next() {&#10;            if (node-&gt;NIL &amp;&amp; node-&gt;begin != node) node = node-&gt;begin;&#10;            else if (!node-&gt;right-&gt;NIL) {&#10;                node = node-&gt;right;&#10;                while (!node-&gt;left-&gt;NIL)&#10;                    node = node-&gt;left;&#10;            } else {&#10;                T current = node;&#10;                T tmp = node;&#10;                node = node-&gt;parent;&#10;                if (!node) {&#10;                    node = current-&gt;right;&#10;                    return;&#10;                }&#10;                while (node-&gt;left != tmp) {&#10;                    if (!node-&gt;parent) {&#10;                        node = current-&gt;right;&#10;                        break;&#10;                    }&#10;                    tmp = node;&#10;                    node = node-&gt;parent;&#10;                }&#10;            }&#10;        }&#10;&#10;        void prev() {&#10;            if (node-&gt;NIL) node = node-&gt;parent;&#10;            else if (!node-&gt;left-&gt;NIL) {&#10;                node = node-&gt;left;&#10;                while (!node-&gt;right-&gt;NIL)&#10;                    node = node-&gt;right;&#10;            } else {&#10;                T tmp = node;&#10;                node = node-&gt;parent;&#10;                while (node-&gt;right != tmp) {&#10;                    tmp = node;&#10;                    if (!node-&gt;parent) {&#10;                        node = tmp-&gt;left - 1;&#10;                        break;&#10;                    }&#10;                    node = node-&gt;parent;&#10;                }&#10;            }&#10;        }&#10;&#10;    public:&#10;        typedef T iterator_type;&#10;        typedef Pair value_type;&#10;        typedef ptrdiff_t difference_type;&#10;        typedef Pair &amp;reference;&#10;        typedef const Pair &amp;const_reference;&#10;        typedef Pair *pointer;&#10;        typedef const Pair *const_pointer;&#10;        typedef typename iterator_traits&lt;iterator_type&gt;::iterator_category iterator_category;&#10;&#10;        node_iterator(T value = nullptr) : node(value) {};&#10;&#10;        ~node_iterator() {};&#10;&#10;        template&lt;class U, class Z&gt;&#10;        node_iterator(const node_iterator&lt;U, Z&gt; &amp;other,&#10;                      typename ft::enable_if&lt;std::is_convertible&lt;U, T&gt;::value&gt;::type * = 0)&#10;                : node(other.base()) {};&#10;&#10;        iterator_type base() const { return node; }&#10;&#10;        node_iterator &amp;operator=(const node_iterator &amp;obj) {&#10;            node = obj.node;&#10;            return *this;&#10;        }&#10;&#10;        node_iterator operator++(int) {&#10;            node_iterator tmp(*this);&#10;            next();&#10;            return tmp;&#10;        }&#10;&#10;        node_iterator &amp;operator++() {&#10;            next();&#10;            return *this;&#10;        }&#10;&#10;        node_iterator operator--(int) {&#10;            node_iterator tmp(*this);&#10;            prev();&#10;            return tmp;&#10;        }&#10;&#10;        node_iterator &amp;operator--() {&#10;            prev();&#10;            return *this;&#10;        }&#10;&#10;        reference operator*() { return *(node-&gt;pair); }&#10;&#10;        const_reference operator*() const { return *(node-&gt;pair); }&#10;&#10;        pointer operator-&gt;() { return node-&gt;pair; }&#10;&#10;        const_pointer operator-&gt;() const { return node-&gt;pair; }&#10;&#10;        bool operator==(node_iterator const &amp;obj) const { return node == obj.node; };&#10;&#10;        bool operator!=(node_iterator const &amp;obj) const { return node != obj.node; };&#10;&#10;        bool operator&gt;(node_iterator const &amp;obj) const { return node-&gt;pair &gt; obj.node-&gt;pair; };&#10;&#10;        bool operator&lt;(node_iterator const &amp;obj) const { return obj.node-&gt;pair &gt; node-&gt;pair; };&#10;&#10;        bool operator&lt;=(node_iterator const &amp;obj) const { return node-&gt;pair &lt;= obj.node-&gt;pair; };&#10;&#10;        bool operator&gt;=(node_iterator const &amp;obj) const { return node-&gt;pair &gt;= obj.node-&gt;pair; };&#10;    };&#10;}&#10;&#10;##endif" language="ObjectiveC" />
          <option name="timeStamp" value="1" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
</project>